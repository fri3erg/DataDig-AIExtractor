import re
from pathlib import Path
from typing import List

from langchain_core.documents import Document

from langchain_community.document_loaders.base import BaseLoader


def concatenate_rows(date: str, sender: str, text: str) -> str:
    """Combine message information in a readable format ready to be used."""
    return f"{sender***REMOVED*** on {date***REMOVED***: {text***REMOVED***\n\n"


class WhatsAppChatLoader(BaseLoader):
    """Load `WhatsApp` messages text file."""

    def __init__(self, path: str):
        """Initialize with path."""
        self.file_path = path

    def load(self) -> List[Document]:
        """Load documents."""
        p = Path(self.file_path)
        text_content = ""

        with open(p, encoding="utf8") as f:
            lines = f.readlines()

        message_line_regex = r"""
            \[?
            (
                \d{1,4***REMOVED***
                [\/.]
                \d{1,2***REMOVED***
                [\/.]
                \d{1,4***REMOVED***
                ,\s
                \d{1,2***REMOVED***
                :\d{2***REMOVED***
                (?:
                    :\d{2***REMOVED***
    ***REMOVED***?
                (?:[\s_](?:AM|PM))?
***REMOVED***
            \]?
            [\s-]*
            ([~\w\s]+)
            [:]+
            \s
            (.+)
        """
        ignore_lines = ["This message was deleted", "<Media omitted>"]
        for line in lines:
            result = re.match(
                message_line_regex, line.strip(), flags=re.VERBOSE | re.IGNORECASE
***REMOVED***
            if result:
                date, sender, text = result.groups()
                if text not in ignore_lines:
                    text_content += concatenate_rows(date, sender, text)

        metadata = {"source": str(p)***REMOVED***

        return [Document(page_content=text_content, metadata=metadata)]
